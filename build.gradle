plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG

            jvmArguments.addAll([
                // 忽略无效指令，避免有的人没安装 JetBrain Runtime 无法启动游戏
                "-XX:+IgnoreUnrecognizedVMOptions",
                // 启用 JetBrain Runtime 热重载功能
                "-XX:+AllowEnhancedClassRedefinition"
            ])
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

  accessTransformers {
    file('src/main/resources/META-INF/accesstransformer.cfg')
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
  mavenLocal()
  mavenCentral()

  // Modrinth Maven 仓库
  maven {
    url = uri("https://api.modrinth.com/maven")
  }

  // BlameJared 的 Forge 相关仓库
  maven {
    url = uri("https://maven.blamejared.com/")
  }

  // Curse Maven (用于 CurseForge 模组)
  maven {
    url = uri("https://www.cursemaven.com")
    content {
      includeGroup "curse.maven"
    }
  }

  // GeckoLib 官方仓库
  maven {
    url = uri("https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/")
    content {
      includeGroup("software.bernie.geckolib")
    }
  }

  // Ziggy 的模组仓库
  maven {
    url = uri("https://maven.zigythebird.com/mods")
  }
}

dependencies {

  implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
  compileOnly "curse.maven:jade-api-${jade_version}"
  implementation "curse.maven:jade-${jade_version}"
  compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
  compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
  localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

  implementation "club.snowlyicewolf:amarok-json-for-java:1.7.9"
  additionalRuntimeClasspath "club.snowlyicewolf:amarok-json-for-java:1.7.9"

  jarJar "club.snowlyicewolf:amarok-json-for-java:1.7.9"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            geckolib_version       : geckolib_version,
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
